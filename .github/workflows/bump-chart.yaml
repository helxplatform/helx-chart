# Convenience workflow responsible for adjusting
# Chart.yml 'version' & 'appVersion' fields to the 
# corresponding app:[version-tag]
# and incrementing 'version' field by 1 in the patch section.

# Additionally, helm-docs is run to autogenerate README.md 
# updates and github badges corresponding to new Chart.yml.

# This workflow will uses the github api to get
# latest app release tag information and update 'appVersion' field or 
# will take user input for the appVersion field.
#
# Eg. Chart.yml
#        name: appstore
#        version: 1.7.0    -> 1.7.1 -> 1.7.2
#        appVersion: 2.1.0 -> 2.2.1 -> 3.0.0
#  
#

name: Bump-Chart-Versions
on:
  workflow_dispatch:
    inputs:
      chartVersion:
        description: 'With every change to the helm chart, the chart version and app version will be the same and should be incremented. If unset- patch increments by +1.'
        required: false
        type: string
    
jobs:
  bump-app-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }} 
        fetch-depth: 0

    - name: Install yq Utility
      run: | 
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64

    - name: Check chartVersion Inputs
      id: checkChartVersion
      shell: bash
      run: |
        if [ "${{ inputs.chartVersion }}" == "" ]; then
          echo "chartVersionPresent=NO" >> $GITHUB_OUTPUT
        else
          echo "chartVersionPresent=YES" >> $GITHUB_OUTPUT
        fi

    # Awk magic below
    # Ref: https://www.reddit.com/r/bash/comments/78rxyv/how_to_make_awk_return_an_integer/
    # We obtain version major.minor.patch, and always increment patch by 1.
    - name: AutoIncrement Chart Version
      run: |
        # Extract the current version from Chart.yaml
        CURRENT_VERSION=$(yq e '.version' Chart.yaml)

        # Split the version into major, minor, and patch
        IFS='.' read -a version_parts <<< "$CURRENT_VERSION"
        MAJOR="${version_parts[0]}"
        MINOR="${version_parts[1]}"
        PATCH="${version_parts[2]//[^0-9]/}" 

        # Increment the patch version
        BUMP_PATCH=$((PATCH + 1))

        # Export the NEW_VERSION variable for use in the yq command
        export NEW_VERSION

        # Update the Chart.yaml file with the new version
        yq e -i '.version = strenv(NEW_VERSION)' Chart.yaml
        yq e -i '.appVersion = strenv(NEW_VERSION)' Chart.yaml
      if: ( steps.checkChartVersion.outputs.chartVersionPresent == 'NO')

    - name: Set User Specified chart version
      env:
        CHARTVERSION: ${{ inputs.chartVersion }} 
      run: |
        yq --inplace '.version = env(CHARTVERSION)' Chart.yaml
        yq --inplace '.appVersion = env(CHARTVERSION)' Chart.yaml
      if: ( steps.checkChartVersion.outputs.chartVersionPresent == 'YES')

############################## Generate Docs and Push ##########################################   
    - name: Download Helm-Docs
      run: |
        wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
        tar -xvf helm-docs_1.11.0_Linux_x86_64.tar.gz
        mv helm-docs /usr/local/bin/
        chmod +x /usr/local/bin/helm-docs 

    - name: Create Helm-Docs README.md
      run: | 
        helm-docs

    - name: Commit Chart.yaml Changes
      uses: EndBug/add-and-commit@v9
      env:
        GH_TOKEN: ${{ github.token }}
      with:
        author_name: Actions_${{ github.actor}}
        message: 'Bumping appVersion and chart version, updating readme'
        add: 'Chart.yaml README.md'